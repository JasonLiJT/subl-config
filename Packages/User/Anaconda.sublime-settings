{
    /*
        Set to false to disable Anaconda linting entirely.
    */
    "anaconda_linting": true,

    /*
        Sets the linting behaviour for anaconda:

        "always" - Linting works always even while you are writing (in the background)
        "load-save" - Linting works in file load and save only
        "save-only" - Linting works in file save only
    */
    "anaconda_linting_behaviour": "load-save",

    /*
        The minimum delay in seconds (fractional seconds are okay) before
        a linter is run when the "anaconda_linting" setting is true. This allows
        you to have background linting active, but defer the actual linting
        until you are idle. When this value is greater than the built in linting delay,
        errors are erased when the file is modified, since the assumption is
        you don't want to see errors while you type (unless the option
        anaconda_linter_persistent is true).
    */
    "anaconda_linter_delay": 0.5,

    /*
        If true, anaconda does not remove lint marks while you type.
    */
    "anaconda_linter_persistent": false,

    // If true, anaconda draws gutter marks on line with errors.
    "anaconda_gutter_marks": true,

    /*

        If anaconda_gutter_marks is true, this determines what theme is used.
        Theme 'basic' only adds dots and circles to gutter.

        Other available themes are 'alpha', 'bright', 'dark', 'hard', "retina"
        (for retina displays) and 'simple'. To see icons that will be used for
        each theme check gutter_icon_themes folder in Anaconda package.
    */
    "anaconda_gutter_theme": "knob",

    /*
        If 'outline' (default), anaconda will outline error lines.
        If 'fill', anaconda will fill the lines.
        If 'solid_underline', anaconda will draw a solid underline below regions.
        If 'stippled_underline', anaconda will draw a stippled underline below regions.
        If 'squiggly_underline', anaconda will draw a squiggly underline below regions.
        If 'none', anaconda will not draw anything on error lines.
    */
    "anaconda_linter_mark_style": "outfill",

    /*
        If this is set to false, anaconda will not underline errors.
    */
    "anaconda_linter_underlines": true,

    /*
        If anaconda_linter_show_errors_on_save is set to true, anaconda
        will show a list of errors when you save the file.

        This is disabled by default.
    */
    "anaconda_linter_show_errors_on_save": false,

    /*
        If you set the following option as true, anaconda will display the
        signatures of the methods you are using while typing
    */
    "display_signatures": false,
    "merge_signatures_and_doc": false,

    /*
        A list of pep8 error numbers to ignore.
        The list of error codes is in this file:
            https://github.com/jcrocholl/pep8/blob/master/pep8.py.
        Search for "Ennn:", where nnn is a 3-digit number.
        E309 is ignored by default as it conflicts with pep257 E211
    */
    "pep8_ignore":
    [
        "E309",
        "E501", //ignore "line too long" bullshit
        "E401", //ignore "multiple imports on one line" bullshit
        "E302", //ignore "expected 2 blank lines, found 1" bullshit
    ],

    // Maximum line length for pep8
    "pep8_max_line_length": 79,

    /*
        Default python interpreter.

        This can (and should) be overridden by project settings
    */
    "python_interpreter": "/Library/Frameworks/Python.framework/Versions/3.6/bin/python3",
}